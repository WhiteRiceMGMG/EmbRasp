・マイコンの起動処理と例外ベクタテーブル

1.マイコンの起動処理
　
　1.1 ROM上のプログラムを実行するタイプ
　　マイコンがリセットされるとROM上の定められたアドレスから
　　プログラムを実行する．そこに起動処理のプログラムを配置．
　　ROMの先頭に例外ベクタテーブルがあり，そこにリセット時に
　　実行開始するプログラムのアドレスが設定されている．
　　リセット時に実行されるプログラムはリセットハンドラという．
　
　1.2 RAM上にプログラムを転送して実行するタイプ
　　比較的高機能なプロセッサに多くあるタイプ．
　　電源投入時，RAMの内容は消去されているため，まずブートROMと
　　呼ばれる起動処理専用のROM上のプログラムが実行され，外部記憶装置から
　　RAM上にプログラムが転送される．外部記憶装置はFMやSD，HDDなど．
　
　1.3　例外と割り込み動作
　　例外と割り込みは特定のイベントが発生すると実行中のプログラムに
　　割り込んで，ハンドラと呼ばれる特別なプログラムを実行する
　　ハードウェア機能．例外と割り込みはハードウェアにより実現される．
　
　1.4　例外ベクタの設定
　　各種例外のハンドラのアドエrすを設定したデータが例外ベクタテーブル．
　　Picoの場合，数段階のブートシーケンスが実行される．
　1.5　方針
　　とりあえず入力抽象化，インテリジェンス，出力抽象化を作る．
　　フラグとかの仕組みがまだわからないので，みてみる．






　2.1　方針
　　Application InputAbst OutputAbstを用意する．
　　MAINLOOPの中でTme_Sysc()のような関数で1msを数え上げる
　　　→グローバルのカウンターを作り，それを参照して1msまで待つ．
　　TmeDriverを作り，関数ポインタ構造体を作ってオブジェクトっぽく書く．


  |--|--main (1ms感覚でWair,App,Inp,Oup,Outを実行)
  |  |--EventFlag (入出力のフラグ定義)
  |  |--Mode(風量や電源などのモードを想定)
  |
  |
  |--|--Application(インテリジェンスを持たせる)
  |  |--InputAbstract (入力デバイスのイベント管理)
  |  |--OutputAbstract (出力デバイスのイベント管理)
  |
  |
  |--F_includes(入出力デバイスの定義)
  |
  |--F_Driver (ドライブ作成，抽象化)

  Application Non-StaticなApp_iFlagとApp_oFlagを作成，
  　　　　　　　Input，Outputとの仮想的共有レジスタ．
  　　　　　　　Driverなどで抽象化して書ける環境構築

  InputAbst，OutPut インテリジェンスを持たず，レジスタの操作のみ

  EventFlag 構造体
      struct {
        uint16_t eventFlag; 
        uint16_t subEventFlag;
      }
    event = Button192,などでデバイスの指定をする
    subEvent = GPIO17セットなど，デバイスの動きを制御
  ・setEvent(使うデバイスのビットを立てる，サブイベント指定)
  ・checkEvent(使うデバイスののフラグ判定，サブイベントはいらない)　など．
  

とりあえず引っ越し！


だいぶかけてきた．

やること
まず最小限の構成のものを掌握する，
とりあえず引っ越し完了
月曜にでんわする．
退去届を出すこと．

とりあえずやりたいのは，最低限の方にbss dataの初期化を追加する．
基盤の方やな！！！
で，仲よくなったンゴｗｗｗ
ｈｈｈｈｈ
退去届は提出済み
で，あとは引っ越し準備だけする．
やねんな